

    There are N rooms and you start in room 0. Each room has a distinct number in 0, 1, 2, ..., N-1, and each room may have some keys to access the next room.

    Formally, each room i has a list of keys rooms[i], and each key rooms[i][j] is an integer in [0, 1, ..., N-1] where N = rooms.length. A key rooms[i][j] = v opens the room
    with number v.

    Initially, all the rooms start locked (except for room 0).

    You can walk back and forth between rooms freely.

    Return true if and only if you can enter every room.

Examples:

    Example 1: 	
    Input: 	[[1],[2],[3],[]]
    Output: 	true
    Explanation: 	We start in room 0, and pick up key 1.
    We then go to room 1, and pick up key 2.
    We then go to room 2, and pick up key 3.
    We then go to room 3.
    Since we were able to go to every room, we return true.
    Example 2: 	
    Input: 	[[1,3],[3,0,1],[2],[0]]
    Output: 	false
    Explanation: 	We can't enter the room with number 2.

Constraints:

        1 <= rooms.length <= 1000
        0 <= rooms[i].length <= 1000
        The number of keys in all rooms combined is at most 3000.

Idea:


(Jump to: Problem Description || Code: JavaScript | Python | Java | C++)

Since we can only enter rooms to which we have found a key, we can't just iterate through the entire input array (R) normally. If we think of this like a graph problem, we
can see that the rooms are like nodes and the keys are like edges.
In that case, we can use a breadth-first search (BFS) queue or a depth-first search (DFS) stack approach, or even a DFS recursion approach here to good effect. Here, we'll 
push newly found keys onto stack as we go through.
To eliminate duplicate stack entries, we can use a lightweight boolean array (vis) to keep track of which rooms have already been pushed onto the stack. Rather than having
to count the number of visited rooms again at the end, we can just use another variable (count) to keep track of that separately.
Once our stack runs empty, we can just check to see if the count is the same as the length of R and return the answer.
