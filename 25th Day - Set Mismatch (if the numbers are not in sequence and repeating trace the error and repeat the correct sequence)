Brute force approach (Time Complexity= n^2)

class Solution {
    public int[] findErrorNums(int[] nums) {
      int dup =-1, missing =-1;
        for (int i=1; i<=nums.length;i++){
            int count =0;
            for(int j=0; j<nums.length;j++){
                if(nums[j]==i)
                count++;
            }
            if(count==2)
                dup=i;
            else if(count==0)
                missing =i;
        }
        return new int[]{dup,missing};
    }
}


Using an extra array in the solution to store the temproay value

Time Complexity - Big O(n)


public class Solution {
    public int[] findErrorNums(int[] nums) {
        int[] arr = new int[nums.length + 1];
        int dup = -1, missing = 1;
        for (int i = 0; i < nums.length; i++) {
            arr[nums[i]] += 1;
        }
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] == 0)
                missing = i;
            else if (arr[i] == 2)
                dup = i;
        }
        return new int[]{dup, missing};
    }
}
