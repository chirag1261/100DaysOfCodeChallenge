Example 1:
Input: tasks = [2,2,3,3,2,4,4,4,4,4]
Output: 4
Explanation: To complete all the tasks, a possible plan is:
- In the first round, you complete 3 tasks of difficulty level 2. 
- In the second round, you complete 2 tasks of difficulty level 3. 
- In the third round, you complete 3 tasks of difficulty level 4. 
- In the fourth round, you complete 2 tasks of difficulty level 4.  
It can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4.

Example 2:
Input: tasks = [2,3,3]
Output: -1
Explanation: There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. Hence, you cannot complete all the tasks, and the answer is -1.

Â 

Constraints:

    1 <= tasks.length <= 105
    1 <= tasks[i] <= 109


Other possible solution 

class Solution {
public int minimumRounds(int[] tasks) {
Map<Integer, Integer> hm = new HashMap<>();
for (int task: tasks) {
hm.put(task, hm.getOrDefault(task, 0) + 1);
}
int freq, ans = 0;
for (Map.Entry<Integer, Integer> entry: hm.entrySet()) {
freq = entry.getValue();
if (freq == 1) {
return -1;
}
if (freq % 3 == 0) {
ans += freq / 3;
} else {
ans += freq / 3 + 1;
}
}
return ans;
}
}
